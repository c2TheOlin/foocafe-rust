The rust compiler is probably its strongest asset.

Guarantees memory safety via "Ownership"
 - No garbage collection
 - No manual alloc
 - Just compile time ownership with rulesets

Values have owners. 1 at a time
Owners scope kills the value.

fn main() {

    let s = String::from("hello");
    {
        let s = String::from("it's me");
        println!("{}", s);
    }
    println!("{}", s);
}

String::from("xxx") --> heap memeory

C# --> Garbage collector tracks and removes unsued memory.
C++ --> mem alloc, dealloc
Rust --> when the scope is done -> drop

Scopes - Resource Acquisition Is Initialization (RAII).

Pass by ref.

Double free error. (C++ it)
{
    let x = String::from("Colin");
    let y = x;

    println!("{}", x);
}
{
    let x = String::from("Colin");
    {
        let y = x;
    }
    println!("{}", x);
}

// Compiler error
-- Rust "Moves" rather than shallow copy but with invalidation
which maintains a single owner. No deep copies unless clones.

For functions this is the same except on "copy" types like integer.
Where is pass by value - this is because copies on the stack are easy.

Whilst it can detect/prevent memory or data issues this wont protect you from
logical errors.

// Do a comprehensive scope demo

- Stack types
- Heap types

fn main() {
    let literalstring = "Hi";
    let heapstring = String::from("hej");

    let copyofliteralstring = literalstring;
    // Both live
    let copymutablestring = heapstring;
    // "Move" heapstring is deallocated.

    let attackoftheclonestring = copymutablestring.clone();
    // ouchy expensive deep copy at runtime.

    println!("{}", heapstring);
}


// Referencing and Dereferencing
Cover the obvious borrowing
 
 // mutable references
restricted to one mut ref in one scope
to prevent dataraces.

Cant mix mut and immutable references to the same type.
unless they go out of scope.

C++

 fn main {
     
 }

